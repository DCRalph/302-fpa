generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model User {
  id                         String                      @id @default(cuid())
  name                       String?
  email                      String?                     @unique
  image                      String?
  role                       UserRole                    @default(USER)
  onboardedAt                DateTime?
  phone                      String?
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @default(now()) @updatedAt
  emailVerified              Boolean
  school                     String?
  professionalBio            String?
  professionalPosition       String?
  professionalQualification  String?
  professionalSpecialisation String?
  professionalBio String?
  

  onboardedAt DateTime?

  blogPosts     BlogPost[]
  registrations Registration[]
  adminNotes    AdminNote[]                 @relation("UserAdminNotes")
  statusChanges RegistrationStatusHistory[] @relation("UserStatusChanges")
  activities  UserActivity[]

  blogPostLikes BlogPostLike[]
  blogPostComments BlogComment[]

}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conference {
  id                        String              @id @default(cuid())
  name                      String
  description               String
  startDate                 DateTime
  endDate                   DateTime
  location                  String
  priceCents                Int
  currency                  String              @default("FJD")
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  isActive                  Boolean             @default(true)
  registrationEndDate       DateTime
  registrationStartDate     DateTime
  maxRegistrations          Int                 @default(0)
  bankTransferAccountName   String
  bankTransferAccountNumber String
  bankTransferBranch        String
  contacts                  ConferenceContact[]
  registrations             Registration[]
}

model ConferenceContact {
  id           String     @id @default(cuid())
  name         String
  conferenceId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  fields       Json
  conference   Conference @relation(fields: [conferenceId], references: [id])
}

model Registration {
  id               String                      @id @default(cuid())
  name             String
  email            String
  phone            String
  school           String
  position         String
  experience       String
  dietary          String?
  accommodation    String?
  message          String?
  registrationType String
  status           String                      @default("pending")
  userId           String?
  ticketTypeId     String?
  priceCents       Int?
  currency         String                      @default("FJD")
  paymentStatus    String                      @default("unpaid")
  checkedInAt      DateTime?
  metadata         Json?
  createdAt        DateTime                    @default(now())
  updatedAt        DateTime                    @updatedAt
  conferenceId     String?
  notes            AdminNote[]
  attachments      Attachment[]
  payments         Payment[]
  conference       Conference?                 @relation(fields: [conferenceId], references: [id])
  ticketType       TicketType?                 @relation(fields: [ticketTypeId], references: [id])
  user             User?                       @relation(fields: [userId], references: [id])
  statusHistory    RegistrationStatusHistory[]

  @@index([email])
  @@index([registrationType])
  @@index([status])
  @@index([userId])
  @@index([ticketTypeId])
  @@index([paymentStatus])
}

model BlogPost {
  id            String             @id @default(cuid())
  title         String
  slug          String?            @unique
  excerpt       String?
  content       String
  coverImageUrl String?
  published     Boolean            @default(false)
  publishedAt   DateTime?
  authorId      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt


  categories BlogPostCategory[]
  tags       BlogPostTag[]
  likes      BlogPostLike[]
  comments   BlogComment[]
}

// Ticket types (e.g., early-bird, standard, student) used for pricing/management

model TicketType {
  id            String         @id @default(cuid())
  name          String
  slug          String         @unique
  description   String?
  priceCents    Int
  currency      String         @default("FJD")
  isActive      Boolean        @default(true)
  saleStartsAt  DateTime?
  saleEndsAt    DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  registrations Registration[]
}

model Payment {
  id                String       @id @default(cuid())
  registrationId    String
  provider          String
  providerPaymentId String?
  amountCents       Int
  currency          String       @default("FJD")
  status            String       @default("pending")
  receiptUrl        String?
  metadata          Json?
  createdAt         DateTime     @default(now())
  registration      Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)

  @@index([registrationId])
}

model AdminNote {
  id             String       @id @default(cuid())
  registrationId String
  authorId       String?
  body           String
  createdAt      DateTime     @default(now())
  author         User?        @relation("UserAdminNotes", fields: [authorId], references: [id])
  registration   Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)

  @@index([registrationId])
}

model RegistrationStatusHistory {
  id             String       @id @default(cuid())
  registrationId String
  previousStatus String?
  newStatus      String
  changedById    String?
  reason         String?
  createdAt      DateTime     @default(now())
  changedBy      User?        @relation("UserStatusChanges", fields: [changedById], references: [id])
  registration   Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)

  @@index([registrationId])
}

model Attachment {
  id             String        @id @default(cuid())
  registrationId String?
  url            String
  filename       String
  mimeType       String?
  sizeBytes      Int?
  createdAt      DateTime      @default(now())
  registration   Registration? @relation(fields: [registrationId], references: [id])

  @@index([registrationId])
}

model UserActivity {
  id        String   @id @default(cuid())
  userId    String
  title     String
  icon      String
  activity  String
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model BlogCategory {
  id        String             @id @default(cuid())
  name      String
  slug      String             @unique
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  posts     BlogPostCategory[]
}

model BlogTag {
  id        String        @id @default(cuid())
  name      String
  slug      String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  postTags  BlogPostTag[]
}

model BlogPostCategory {
  postId     String
  categoryId String
  category   BlogCategory @relation(fields: [categoryId], references: [id])
  post       BlogPost     @relation(fields: [postId], references: [id])

  @@id([postId, categoryId])
}

model BlogPostTag {
  postId String
  tagId  String
  post   BlogPost @relation(fields: [postId], references: [id])
  tag    BlogTag  @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}

model BlogPostLike {
  id        String   @id @default(cuid())

  postId    String
  post      BlogPost @relation(fields: [postId], references: [id])

  userId    String
  user      User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogComment {
  id          String   @id @default(cuid())
  post        BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  content     String
  approved    Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([postId])
}

model NewsletterSubscription {
  id          String    @id @default(cuid())
  email       String    @unique
  name        String?
  createdAt   DateTime  @default(now())
  confirmedAt DateTime?
}

model ContactMessage {
  id        String    @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String?
  message   String
  status    String    @default("open")
  createdAt DateTime  @default(now())
  closedAt  DateTime?
}

model SiteSettings {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  key         String   @unique
  value       String
  description String?
}

model BlogPostLike {
  id        String   @id
  postId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime
  BlogPost  BlogPost @relation(fields: [postId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

enum UserRole {
  ADMIN
  USER
}
